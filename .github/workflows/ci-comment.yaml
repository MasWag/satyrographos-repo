name: CI Comment

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed

jobs:
  ci-comment:
    name: Update PR body
    if: >
      ${{ github.event.workflow_run.event == 'pull_request' &&
      github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    env:
      OPAMSOLVERTIMEOUT: 3600
      SNAPSHOT: "snapshot-${{ matrix.snapshot }}"
    steps:
      - name: Checkout code (10 commits)
        uses: actions/checkout@v2

      - name: 'Download artifact'
        uses: actions/github-script@v3.1.0
        with:
          script: |
            const artifacts = await github.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: ${{github.event.workflow_run.id }},
            });
            const fs = require('fs');
            const matchedArtifacts = artifacts.data.artifacts.filter((artifact) => {
              return artifact.name.startsWith('pr');
            });
            for await (const artifact of matchedArtifacts) {
              const download = await github.actions.downloadArtifact({
                 owner: context.repo.owner,
                 repo: context.repo.repo,
                 artifact_id: artifact.id,
                 archive_format: 'zip',
              });
              fs.writeFileSync('${{github.workspace}}/${artifact.id}.zip', Buffer.from(download.data));
            }

      - name: Extract
        run: |
          for file in *.zip ; do
            unzip "$file" -d "${file%.zip}"
          done

      - name: Update the PR body
        uses: actions/github-script@v2
        env:
          SNAPSHOT_UPDATABLE: ${{ steps.test-update-snapshot.outputs.result }}
          PACKAGES_TO_UPDATE: ${{ steps.test-update-snapshot.outputs.packages }}
        with:
          github-token: ${{ github.token }}
          script: |
            const fs = require('fs');
            const dir = await fs.promises.opendir('.');
            const snapshots = [];
            for await (const dirent of dir) {
              if (dirent.isDirectory() && dirent.name.startsWith('pr-')) {
                  const dirname = dirent.name;
                  const pull_number = Number(fs.readFileSync(`${dirname}/pull-number.txt`));
                  const snapshot = fs.readFileSync(`${dirname}/id.txt`);
                  const result = fs.readFileSync(`${dirname}/result.txt`);
                  const packages = fs.readFileSync(`${dirname}/packages.txt`);
                  snapshots.push({pull_number, snapshot, result, packages});
               }
            }

            const pull_number = snapshots[0].pull_number;
            const pullRequestId = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number
            };
            const pull_request = await github.pulls.get(pullRequestId);
            const actionHeader = '\n# Automatic follow-ups\n';
            const actionText = (snapshot) => `Add to snapshot \`${snapshot}\``;

            const body = pull_request.data.body.replace(/\r?\n/g, '\n');

            if (body) {
              const splitted = body.split(actionHeader);

              const actions = splitted[1]
                ? splitted[1]
                  .split('\n- ')
                  .map((action) => {
                    for (snapshot of snapshots) {
                      if (action === actionText(snapshot.snapshot)) {
                        switch (snapshot.result) {
                          case 'updated':
                            return `[ ] ${action}: ${snapshot.packages}`;
                          case 'no-updates':
                            return `~~${action}~~`;
                          case 'failed':
                            return `~~${action}~~ ([Inconsistent](https://github.com/${context.github.repository}/runs/${{ github.event.workflow_run.id }}?check_suite_focus=true))`;
                        }
                      }
                    }
                    return action;
                  })
                : [];

              const replacedBody = `${splitted[0]}${actionHeader}${actions.join('\n- ')}`;

              await github.pulls.update({
                ...pullRequestId,
                body: replacedBody
              });
            }

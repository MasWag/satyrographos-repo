name: CI Comment

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed

jobs:
  ci-comment:
    name: Update PR body
    if: >
      ${{ github.event.workflow_run.event == 'pull_request' &&
      github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    env:
      OPAMSOLVERTIMEOUT: 3600
      SNAPSHOT: "snapshot-${{ matrix.snapshot }}"
    steps:
      - name: 'Download artifact'
        uses: actions/github-script@v3.1.0
        with:
          script: |
            var artifacts = await github.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: ${{github.event.workflow_run.id }},
            });
            var matchArtifact = artifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "pr"
            })[0];
            var download = await github.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact.id,
               archive_format: 'zip',
            });
            var fs = require('fs');
            fs.writeFileSync('${{github.workspace}}/pr.zip', Buffer.from(download.data));
      - run: unzip pr.zip

      - name: Update the PR body
        uses: actions/github-script@v2
        env:
          SNAPSHOT_UPDATABLE: ${{ steps.test-update-snapshot.outputs.result }}
          PACKAGES_TO_UPDATE: ${{ steps.test-update-snapshot.outputs.packages }}
        with:
          github-token: ${{ github.token }}
          script: |
            var fs = require('fs');
            var pull_number = Number(fs.readFileSync('./pull-number.txt'));
            var snapshot = fs.readFileSync('./id.txt');
            var result = fs.readFileSync('./result.txt');
            var packages = fs.readFileSync('./packages.txt');

            const pullRequestId = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number
            };
            const pull_request = await github.pulls.get(pullRequestId);
            const actionHeader = '\n# Automatic follow-ups\n';
            const actionText = `Add to snapshot \`${snapshot}\``;

            const body = pull_request.data.body.replace(/\r?\n/g, '\n');

            if (body) {
              const splitted = body.split(actionHeader);

              const actions = splitted[1]
                ? splitted[1]
                  .split('\n- ')
                  .map((action) => {
                    if (action === actionText) {
                      switch (result) {
                        case 'updated':
                         return `[ ] ${action}: ${packages}`;
                        case 'no-updates':
                          return `~~${action}~~`;
                        case 'failed':
                          return `~~${action}~~ ([Inconsistent](https://github.com/${context.github.repository}/runs/${{ github.event.workflow_run.id }}?check_suite_focus=true))`;
                      }
                    } else {
                      return action;
                    }
                  })
                : [];

              const replacedBody = `${splitted[0]}${actionHeader}${actions.join('\n- ')}`;

              await github.pulls.update({
                ...pullRequestId,
                body: replacedBody
              });
            }
